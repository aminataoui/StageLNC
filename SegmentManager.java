package SegmenteTrace;

import SuiteUtilitaires.JTablesUtilities;
import commons.writingZ.ListTableModel;
import commons.writingZ.SampleDoubleZ;
import java.awt.Component;
import java.awt.Dimension;
import java.text.NumberFormat;
import java.util.*;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.TableCellRenderer;

/**
 * segmentManager.java
 *
 * Created on 13 janvier 2007, 09:41
 *
 *
 * 4 1 2011 : ajout d'une arrayListpour les data modifiees (suppression...)
 * Utiliser la classe DataReconstruction lors des operations de modification
 * avec les donnees de la table des segments courante 28 5 211 Pour eviter le
 * DefaultTableModel on utilise ListTableModel de Commons permet d'eviter Vector
 * : obsolete
 *
 * 9 septembre 2018 Mis un jtextField d'information
 *
 *
 * @author JC Gilhodes
 */
public class SegmentManager extends javax.swing.JPanel {

    ListTableModel tableModel;
    SegmenteTraceFrame parent;
    ChartDataPanel graph;
    private ArrayList<SampleDoubleZ> dataDoubleDest;
    private final ArrayList<SampleDoubleZ> dataDoubleSource;
    /* Nb mini d'un seg entrainant un signalemente en orange */
    private int nbMinSignaler = 10;
    /*nb min pour former une segment utilisable sinon marque la ligne en rouge*/
    private final int nbMinPlancher = 5;
//     /** definit les types pour chaque colonne */
    private final Class[] types = new Class[]{
        java.lang.Integer.class,
        java.lang.Integer.class,
        java.lang.Double.class,
        java.lang.Integer.class,
        java.lang.Double.class,
        java.lang.Double.class
    };
    int[] rowIndex;
    /**
     * en-tetes de colonnes
     */

    private final String[] columnNames = new String[]{
        "Seg. Num", "Nb", "Rang debut", "T debut", "Rang fin",
        " T fin  "
    };
    NumberFormat nf2, nf3;
    
    
    /**
     * Creates new form segmentManager
     */

    /**
     * Creates new form segmentManager
     * @param main
     */
    public SegmentManager(SegmenteTraceFrame main) {
        parent = main;
        dataDoubleSource = parent.getData();
        dataDoubleDest = parent.getData();// copie de travail
        setTableModel();

        initComponents();

        JTablesUtilities.setCellsAlignment(jTable_Limites, SwingConstants.CENTER);
        //setTableSelectionModel();
        jTable_Limites.requestFocusInWindow();
        nf2 = NumberFormat.getInstance(Locale.FRENCH);
        nf3 = NumberFormat.getInstance(Locale.FRENCH);
        nf2.setMaximumFractionDigits(2);
        nf3.setMaximumFractionDigits(3);
    }

//    private void setTableSelectionModel(){
//        jTable_Limites.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
//            
//            @Override
//            public void valueChanged(ListSelectionEvent event) {
//                
//                rowIndex = jTable_Limites.getSelectedRows();
//                if ( rowIndex.length> -1) {
//                  
//                    for (int i = 0; i < rowIndex.length; i++) {
//                        int j = rowIndex[i];
//                         System.out.println(" Listener "+j+"  seg "+jTable_Limites.getValueAt(j, 0).toString());
//                    }
//                   
//                }
//            }
//        });
//    }
//    private void keyBinding() {
//        jTable_Limites.getInputMap().put(KeyStroke.getKeyStroke(38, 0),
//                "doSomething");
//        jTable_Limites.getActionMap().put("doSomething",
//                showSelected(this.rowIndex);
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar = new javax.swing.JToolBar();
        jButton_Add = new javax.swing.JButton();
        jButton_Remove = new javax.swing.JButton();
        jButton_ShowSeg = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabelNbMin = new javax.swing.JLabel();
        jSpinnerNbMin = new javax.swing.JSpinner();
        jButton_RemoveAll = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabelNbSeg = new javax.swing.JLabel();
        jTextField_NbSeg = new javax.swing.JTextField();
        jScrollPane_Limites = new javax.swing.JScrollPane();
        jTable_Limites = new javax.swing.JTable();
        jTextFieldInfo = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste Segments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        setMinimumSize(new java.awt.Dimension(500, 700));
        setPreferredSize(new java.awt.Dimension(550, 700));
        setLayout(new java.awt.BorderLayout());

        jToolBar.setBackground(new java.awt.Color(199, 198, 198));
        jToolBar.setMinimumSize(new java.awt.Dimension(450, 42));
        jToolBar.setPreferredSize(new java.awt.Dimension(450, 42));

        jButton_Add.setBackground(new java.awt.Color(243, 244, 209));
        jButton_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/PlusPlus.gif"))); // NOI18N
        jButton_Add.setToolTipText("Ajouter le segment entre les curseurs");
        jButton_Add.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton_Add.setMaximumSize(new java.awt.Dimension(50, 40));
        jButton_Add.setMinimumSize(new java.awt.Dimension(50, 40));
        jButton_Add.setPreferredSize(new java.awt.Dimension(50, 40));
        jButton_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddActionPerformed(evt);
            }
        });
        jToolBar.add(jButton_Add);

        jButton_Remove.setBackground(new java.awt.Color(243, 244, 209));
        jButton_Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Eraser-2-icon.png"))); // NOI18N
        jButton_Remove.setToolTipText("Effacer la sélection");
        jButton_Remove.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton_Remove.setMaximumSize(new java.awt.Dimension(50, 40));
        jButton_Remove.setMinimumSize(new java.awt.Dimension(50, 40));
        jButton_Remove.setPreferredSize(new java.awt.Dimension(50, 40));
        jButton_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveActionPerformed(evt);
            }
        });
        jToolBar.add(jButton_Remove);

        jButton_ShowSeg.setBackground(new java.awt.Color(243, 244, 209));
        jButton_ShowSeg.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton_ShowSeg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/CrayonsCouleur.png"))); // NOI18N
        jButton_ShowSeg.setToolTipText("Afficher le segment ");
        jButton_ShowSeg.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton_ShowSeg.setMaximumSize(new java.awt.Dimension(50, 40));
        jButton_ShowSeg.setMinimumSize(new java.awt.Dimension(50, 40));
        jButton_ShowSeg.setPreferredSize(new java.awt.Dimension(50, 40));
        jButton_ShowSeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ShowSegActionPerformed(evt);
            }
        });
        jToolBar.add(jButton_ShowSeg);

        jSeparator1.setMaximumSize(new java.awt.Dimension(50, 32767));
        jSeparator1.setPreferredSize(new java.awt.Dimension(50, 0));
        jToolBar.add(jSeparator1);

        jLabelNbMin.setBackground(new java.awt.Color(255, 204, 102));
        jLabelNbMin.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabelNbMin.setText("  Nb min :");
        jLabelNbMin.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jLabelNbMin.setMaximumSize(new java.awt.Dimension(50, 40));
        jLabelNbMin.setMinimumSize(new java.awt.Dimension(50, 40));
        jLabelNbMin.setOpaque(true);
        jLabelNbMin.setPreferredSize(new java.awt.Dimension(50, 40));
        jToolBar.add(jLabelNbMin);

        jSpinnerNbMin.setModel(new javax.swing.SpinnerNumberModel(10, 6, 1000, 1));
        jSpinnerNbMin.setToolTipText("Signalement des segments avec un nombre minimum");
        jSpinnerNbMin.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 153, 51), new java.awt.Color(204, 102, 0)));
        jSpinnerNbMin.setMaximumSize(new java.awt.Dimension(50, 40));
        jSpinnerNbMin.setMinimumSize(new java.awt.Dimension(50, 40));
        jSpinnerNbMin.setPreferredSize(new java.awt.Dimension(50, 40));
        jSpinnerNbMin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerNbMinStateChanged(evt);
            }
        });
        jToolBar.add(jSpinnerNbMin);

        jButton_RemoveAll.setBackground(new java.awt.Color(243, 244, 209));
        jButton_RemoveAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/if_draw-08_725558.png"))); // NOI18N
        jButton_RemoveAll.setToolTipText("Effacer la sélection");
        jButton_RemoveAll.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton_RemoveAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton_RemoveAll.setMaximumSize(new java.awt.Dimension(50, 40));
        jButton_RemoveAll.setMinimumSize(new java.awt.Dimension(50, 40));
        jButton_RemoveAll.setPreferredSize(new java.awt.Dimension(50, 40));
        jButton_RemoveAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton_RemoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveAllActionPerformed(evt);
            }
        });
        jToolBar.add(jButton_RemoveAll);

        jSeparator2.setMaximumSize(new java.awt.Dimension(200, 32767));
        jSeparator2.setPreferredSize(new java.awt.Dimension(120, 0));
        jToolBar.add(jSeparator2);

        jLabelNbSeg.setText("Nb. Segments : ");
        jToolBar.add(jLabelNbSeg);

        jTextField_NbSeg.setBackground(new java.awt.Color(244, 239, 239));
        jTextField_NbSeg.setToolTipText("Nombre de segments");
        jTextField_NbSeg.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jTextField_NbSeg.setMaximumSize(new java.awt.Dimension(50, 40));
        jTextField_NbSeg.setMinimumSize(new java.awt.Dimension(50, 40));
        jTextField_NbSeg.setPreferredSize(new java.awt.Dimension(50, 40));
        jToolBar.add(jTextField_NbSeg);

        add(jToolBar, java.awt.BorderLayout.NORTH);

        jScrollPane_Limites.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane_Limites.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane_Limites.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane_Limites.setColumnHeaderView(jTable_Limites);
        jScrollPane_Limites.setMinimumSize(new java.awt.Dimension(450, 1200));
        jScrollPane_Limites.setPreferredSize(new java.awt.Dimension(400, 800));

        jTable_Limites.setBackground(new java.awt.Color(251, 251, 246));
        jTable_Limites.setModel(tableModel);
        jTable_Limites.setMaximumSize(new java.awt.Dimension(500, 32767));
        jTable_Limites.setMinimumSize(new java.awt.Dimension(450, 1024));
        jTable_Limites.setPreferredSize(new java.awt.Dimension(500, 10000));
        jTable_Limites.setRequestFocusEnabled(false);
        jTable_Limites.setSelectionBackground(new java.awt.Color(102, 102, 102));
        jTable_Limites.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jTable_Limites.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jTable_LimitesMouseDragged(evt);
            }
        });
        jTable_Limites.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_LimitesMouseClicked(evt);
            }
        });
        jTable_Limites.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable_LimitesKeyPressed(evt);
            }
        });
        jScrollPane_Limites.setViewportView(jTable_Limites);

        add(jScrollPane_Limites, java.awt.BorderLayout.CENTER);

        jTextFieldInfo.setToolTipText("Info courante");
        add(jTextFieldInfo, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ShowSegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ShowSegActionPerformed
        if (parent.xyChart != null) {
            refreshChart();
        }
    }//GEN-LAST:event_jButton_ShowSegActionPerformed

    private void jTable_LimitesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_LimitesMouseClicked
       jTable_Limites.requestFocus();
        rowIndex = jTable_Limites.getSelectedRows();
        if (rowIndex.length > 0) {
            this.showSelected(rowIndex);
        }

    }//GEN-LAST:event_jTable_LimitesMouseClicked

    private void jButton_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveActionPerformed
        removeSelectedRows();
        reConstruire();
    }//GEN-LAST:event_jButton_RemoveActionPerformed

    private void jButton_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddActionPerformed
        concatener();
    }//GEN-LAST:event_jButton_AddActionPerformed

    private void jSpinnerNbMinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerNbMinStateChanged
        int newValue = (Integer) jSpinnerNbMin.getValue();
        if (newValue != nbMinSignaler) {
            nbMinSignaler = newValue;
            if (this.jTable_Limites != null) {
                ordonne();
            }
        }
}//GEN-LAST:event_jSpinnerNbMinStateChanged

    private void jButton_RemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveAllActionPerformed
        removeAllMinimales();
    }//GEN-LAST:event_jButton_RemoveAllActionPerformed

    private void jTable_LimitesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable_LimitesKeyPressed
        jTable_Limites.validate();
        //int[] rowIndex = jTable_Limites.getSelectedRows();
        System.out.println("Row selected[0] " + rowIndex[0]);
        //System.out.println("Pressed keychar " + evt.getKeyChar() + " code " + evt.getKeyCode() + " ext code " + evt.getExtendedKeyCode() + " loc " + evt.getKeyLocation());
        if (evt.getKeyCode() == 8) {// suppr
            removeSelectedRows();
            reConstruire();
        } else if (evt.getKeyCode() == 47) { // +
            concatener();
        }
//        } else if (evt.getKeyCode() == 38) {// vers haut
//            rowIndex = jTable_Limites.getSelectedRows();
//            if (rowIndex.length > 0) {
//                this.showSelected(rowIndex);
//            }
//        } else if (evt.getKeyCode() == 40) {// vers bas 
//            rowIndex = jTable_Limites.getSelectedRows();
//            if (rowIndex.length > 0) {
//                this.showSelected(rowIndex);
//            }
//
//        }
    }//GEN-LAST:event_jTable_LimitesKeyPressed

    private void jTable_LimitesMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_LimitesMouseDragged
        jTable_Limites.requestFocus();
        rowIndex = jTable_Limites.getSelectedRows();
        if (rowIndex.length > 0) {
            this.showSelected(rowIndex);
        }

    }//GEN-LAST:event_jTable_LimitesMouseDragged

    private void removeAllMinimales() {

        for (int rowIndex = 0; rowIndex < tableModel.getRowCount(); rowIndex++) {
            int segNum = (Integer) tableModel.getValueAt(rowIndex, 0);
            int nbVal = (Integer) tableModel.getValueAt(rowIndex, 1);
            if (nbVal <= this.nbMinPlancher) {
                System.out.println(segNum + " Plus petit " + nbVal);
//                jTable_Limites.setSelectionBackground(Color.BLACK);
//                jTable_Limites.setSelectionForeground(Color.WHITE);
            }

        }
        jTable_Limites.repaint();

    }

    private void concatener() {
        int[] rowIndex = jTable_Limites.getSelectedRows();
        int nbSelected = rowIndex.length;
        if (nbSelected > tableModel.getRowCount()) {
            return;
        }
        if (nbSelected < 1) {
//            Utils.errorMessage("Erreur index row = " + rowSelectedIndexs);
            return;
        }
        int rang1 = (Integer) tableModel.getValueAt(rowIndex[0], 2);
        double lim1 = (Double) tableModel.getValueAt(rowIndex[0], 3);
        double lim2 = (Double) tableModel.getValueAt(rowIndex[nbSelected - 1], 5);

        String mess = "  ++ Concatenation segments de " + lim1 + " a " + lim2;
        this.jTextFieldInfo.setText(mess);
        parent.historique.append(mess).append("\n");
        parent.statusEtHistorique(mess);
        removeSelectedRows();// .... la selection
        addSegment(lim1, lim2);// ajouter la concatenation
        reConstruire();// rebatir les donnees

        /* afficher le nouveau segment */
        int select = findRowIndex(rang1);
        jTable_Limites.setRowSelectionInterval(select, select);
        showSelected(this.rowIndex);
        parent.setXYChart(this.getDataDouble());
    }

    public void reConstruire() {
        DataReconstruction drc = new DataReconstruction(
                dataDoubleDest, getRangsDebutSegments(),
                this.getRangsFinSegments());
        dataDoubleDest = drc.reConstruire();
        int[] rangDeb = drc.getDebutSegmentsDest();
        int[] rangFin = drc.getFinSegmentsDest();
        /* actualiser le tableau  */
        for (int row = 0; row < rangFin.length; row++) {
            tableModel.setValueAt(rangDeb[row], row, 2);
            tableModel.setValueAt(rangFin[row], row, 4);
        }
        ordonne();
        afficheNb();
        if (parent.xyChart != null) {
            refreshChart();
        }
    }

    private void removeSelectedRows() {
        int[] rowSelectedIndexs = jTable_Limites.getSelectedRows();

        int nbSelected = rowSelectedIndexs.length;
        if (nbSelected > tableModel.getRowCount() || nbSelected < 1) {
            return;
        }
        double lim1 = (Double) tableModel.getValueAt(rowSelectedIndexs[0], 3);
        double lim2 = (Double) tableModel.getValueAt(
                rowSelectedIndexs[nbSelected - 1], 5);

        while (nbSelected > 0) {
            tableModel.removeRows(rowSelectedIndexs[0]);
            this.jTable_Limites.validate();
            rowSelectedIndexs = jTable_Limites.getSelectedRows();
            nbSelected = rowSelectedIndexs.length;
        }

        String mess = "Suppression segment(s) " + "  de " + lim1 + " a  " + lim2;
        jTextFieldInfo.setText(mess);
        parent.historique.append(mess).append("\n");
        parent.statusEtHistorique(mess);
    }

    public void addSegment(Double m1, Double m2) {
        if (segmentExiste(m1, m2)) {
            return;
        }
        int rowIndex = tableModel.getRowCount();
        int nbsamples = getRang(m2) - getRang(m1);
        tableModel.addRow(new Object[]{rowIndex, nbsamples, getRang(m1), m1, getRang(
            m2), m2});
        rowIndex = tableModel.getRowCount() - 1;
        jTable_Limites.setRowSelectionInterval(rowIndex, rowIndex);
        ordonne();
        afficheNb();
        refreshChart();

    }

    public void addSegment(double tDebut, double tFin) {
        if (segmentExiste(tDebut, tFin)) {
            return;
        }
        int rowIndex = tableModel.getRowCount();

        int nbsamples = getRang(tFin) - getRang(tDebut);
        tableModel.addRow(new Object[]{rowIndex, nbsamples, getRang(tDebut), tDebut, getRang(
            tFin), tFin});
        String mess = "  Ajout segment num " + rowIndex + ", " + nbsamples + " points, de " + tDebut + " a  " + tFin;
        this.jTextFieldInfo.setText(mess);
//        parent.historique.append(mess).append("\n");
//        parent.statusEtHistorique(mess);
        rowIndex = tableModel.getRowCount() - 1;
        jTable_Limites.setRowSelectionInterval(rowIndex,
                rowIndex);
        int hSize = this.jTable_Limites.getRowHeight() * rowIndex + 20;
        //this.jScrollPane_Limites.setPreferredSize(jTable_Limites.getPreferredScrollableViewportSize());
        jTable_Limites.setPreferredSize(new Dimension(500, hSize));
        ordonne();
        afficheNb();
        refreshChart();

    }

    public void addSegment(int rang1, int rang2) {
        double m1 = dataDoubleDest.get(rang1).gettR();
        double m2 = dataDoubleDest.get(rang2).gettR();
        addSegment(m1, m2);
    }

    private Integer getRang(double t) {
        for (int i = 0; i < dataDoubleDest.size() - 1; i++) {
            SampleDoubleZ sd = dataDoubleDest.get(i);
            if (sd.gettR() == t) {
                return i;
            }
        }
        return dataDoubleDest.size() - 1;
    }

    private boolean segmentExiste(double m1, double m2) {
        double l1, l2;
        boolean exist = false;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            l1 = getDebutSegment(i);
            l2 = getFinSegment(i);
            if (l1 == m1 && l2 == m2) {
                exist = true;
            }
        }
        return exist;
    }

    public int getNbSegments() {
        return tableModel.getRowCount();
    }

    public ArrayList<SampleDoubleZ> getDataDouble() {
        return dataDoubleDest;
    }

    /**
     * Nombre de samples du segment
     *
     * @param segNum
     * @return
     */
    public int getNbSamplesSegment(int segNum) {
        return (Integer) tableModel.getValueAt(segNum, 1);
    }

    /**
     * rang du debut du seg de num donne
     *
     * @param segNum
     * @return
     */
    public int getRangDebutSegment(int segNum) {
        return (Integer) tableModel.getValueAt(segNum, 2);
    }

    /**
     * rang du fin du seg de num donne
     *
     * @param segNum
     * @return
     */
    public int getRangFinSegment(int segNum) {
        return (Integer) tableModel.getValueAt(segNum, 4);
    }

    /**
     * Rangs des debuts de segments
     *
     * @return
     */
    public int[] getRangsDebutSegments() {
        int[] debuts = new int[tableModel.getRowCount()];
        for (int s = 0; s < tableModel.getRowCount(); s++) {
            debuts[s] = getRangDebutSegment(s);
        }
        return debuts;
    }

    /**
     * Rangs des fins de segments
     *
     * @return
     */
    public int[] getRangsFinSegments() {
        int[] fins = new int[tableModel.getRowCount()];
        for (int s = 0; s < tableModel.getRowCount(); s++) {
            fins[s] = getRangFinSegment(s);
        }
        return fins;
    }

    /**
     * Debuts et fins de segments en format LOng en ms
     */
    /**
     * t du debut de segment en format long
     *
     * @param index
     * @return
     */
    public long getDebutSegmentL(int index) {
        long tDeb = Double.doubleToLongBits((Double) tableModel.getValueAt(index,
                3));
        tDeb *= 1000;
        return tDeb;
    }

    /**
     * Vecteur des t de debut segments en format long et en ms
     *
     * @return
     */
    public long[] getDebutSegmentsL() {
        long[] debuts = new long[tableModel.getRowCount()];
        for (int s = 0; s < tableModel.getRowCount(); s++) {
            debuts[s] = getDebutSegmentL(s);
        }
        return debuts;
    }

    /**
     * t de fin segment en format long et en ms
     *
     * @param index
     * @return
     */
    public long getFinSegmentL(int index) {
        long tFin = Double.doubleToLongBits((Double) tableModel.getValueAt(index,
                5));
        tFin *= 1000;
        return tFin;
    }

    /**
     * Vecteur des t de fin segments en format long et en ms
     *
     * @return
     */
    public long[] getFinSegmentsL() {
        long[] fins = new long[tableModel.getRowCount()];
        for (int s = 0; s < tableModel.getRowCount(); s++) {
            fins[s] = getFinSegmentL(s);
        }
        return fins;
    }

    /**
     * T debut de segment en format double et secondes
     *
     * @param index
     * @return
     */
    public double getDebutSegment(int index) {
        return (Double) tableModel.getValueAt(index, 3);
    }

    /**
     * vecteur T des fins de segment en format double et secondes
     *
     * @return
     */
    public double[] getDebutSegments() {
        double[] debuts = new double[tableModel.getRowCount()];
        for (int s = 0; s < tableModel.getRowCount(); s++) {
            debuts[s] = (Double) tableModel.getValueAt(s, 3);
        }
        return debuts;
    }

    /**
     *
     * @param index
     * @return
     */
    public double getFinSegment(int index) {
        return (Double) tableModel.getValueAt(index, 5);
    }

    /**
     *
     * @return
     */
    public double[] getFinSegments() {
        double[] fins = new double[tableModel.getRowCount()];
        for (int s = 0; s < tableModel.getRowCount(); s++) {
            fins[s] = (Double) tableModel.getValueAt(s, 5);
        }
        return fins;
    }

    /**
     * VÃ©rifier si les segments ont un nb suffisant de valeurs
     *
     * @return
     */
    public boolean isAllSegmentsOK() {
        boolean isOk = true;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            int nbSamples = (Integer) tableModel.getValueAt(i, 1);
            if (nbSamples < nbMinPlancher) {
                isOk = false;
            }
        }
        return isOk;
    }

    public void refreshChart() {
        parent.setXYChart(dataDoubleDest);
        parent.xyChart.setNormalRenderer();
    }

    private void setTableModel() {
        tableModel = new ListTableModel(Arrays.asList(columnNames));
        for (int i = 0; i < types.length; i++) {
            tableModel.setColumnClass(i, types[i]);
            tableModel.setColumnEditable(i, false);
        }
    }

    public void setNbMinSamples(int nbMin) {
        if (nbMin < nbMinPlancher) {
            nbMin = nbMinPlancher + 1;
        }
        if (nbMin != nbMinSignaler) {
            nbMinSignaler = nbMin;
            ordonne();
        }
    }

    private void showSelected(int[] indexRowSelected) {
        double[] tDebut = new double[indexRowSelected.length];
        double[] tFin = new double[indexRowSelected.length];
        String[] label = new String[indexRowSelected.length];

        for (int i = 0; i < indexRowSelected.length; i++) {
            tDebut[i] = (Double) tableModel.getValueAt(indexRowSelected[i], 3);
            tFin[i] = (Double) tableModel.getValueAt(indexRowSelected[i], 5);
            //   System.out.println(" col " + col + " indexRowSelected " + indexRowSelected[col] + " tDebut " + tDebut[col] + " tFin " + tFin[col]);
            label[i] = "Seg " + Integer.toString((Integer) tableModel.getValueAt(
                    indexRowSelected[i], 0));
        }

        parent.chartPression.setRangeMarks(label, tDebut, tFin);

        parent.chartVitesse.setRangeMarks(label, tDebut, tFin);

        parent.xyChart.setSelectionRenderer(indexRowSelected);
    }

    private void ordonne() {
        // Sort all the rows in descending order based on the
        // values in the second column of the model
        sortAllRowsBy(tableModel, 2, true);
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt(i + 1, i, 0);
        }
        ColorRenderer cr = new ColorRenderer("Nb", nbMinSignaler, nbMinPlancher);
        for (int i = 0; i < this.jTable_Limites.getColumnCount(); i++) {
            jTable_Limites.getColumn(jTable_Limites.getColumnName(i)).setCellRenderer(
                    cr);
        }
        jTable_Limites.repaint();
    }

    private int findRowIndex(int rang1) {
        int row = 0;
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            int rang = (Integer) tableModel.getValueAt(i, 2);
            if (rang == rang1) {
                return i;
            }
        }
        return row;
    }

    // Regardless of sort order (ascending or descending), null values always appear last.
    // colIndex specifies a column in model.
    public void sortAllRowsBy(ListTableModel model, int colIndex,
            boolean ascending) {
        List data = tableModel.getRowsAsList();
        Collections.sort(data, new ColumnSorter(colIndex, ascending));
        model.fireTableStructureChanged();
    }

    public void clear() {
        this.dataDoubleDest = dataDoubleSource;

        tableModel.removeRowRange(0, tableModel.getRowCount() - 1);//getDataVector().removeAllElements();
        tableModel.fireTableStructureChanged();
        afficheNb();
        if (parent.xyChart != null) {
            parent.xyChart.setNormalRenderer();
        }
    }

    public String tableSegToString() {
        String str = "";
        for (int i = 0; i < this.columnNames.length; i++) {
            str += columnNames[i] + "\t";
        }
        str += "\n";
        for (int rowIndex = 0; rowIndex < jTable_Limites.getRowCount(); rowIndex++) {
            str += Integer.toString(rowIndex) + "\t";
            str += (Integer) tableModel.getValueAt(rowIndex, 1) + "\t";
            str += (Integer) tableModel.getValueAt(rowIndex, 2) + "\t";
            str += nf3.format((Double) tableModel.getValueAt(rowIndex, 3)) + " s\t";
            str += (Integer) tableModel.getValueAt(rowIndex, 4) + "\t";
            str += nf3.format((Double) tableModel.getValueAt(rowIndex, 5)) + " s\n";
        }
        return str;
    }

    private void afficheNb() {
        jTextField_NbSeg.setText(Integer.toString(tableModel.getRowCount()));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Add;
    private javax.swing.JButton jButton_Remove;
    private javax.swing.JButton jButton_RemoveAll;
    private javax.swing.JButton jButton_ShowSeg;
    private javax.swing.JLabel jLabelNbMin;
    private javax.swing.JLabel jLabelNbSeg;
    private javax.swing.JScrollPane jScrollPane_Limites;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSpinner jSpinnerNbMin;
    private javax.swing.JTable jTable_Limites;
    private javax.swing.JTextField jTextFieldInfo;
    private javax.swing.JTextField jTextField_NbSeg;
    private javax.swing.JToolBar jToolBar;
    // End of variables declaration//GEN-END:variables

    class ColorRenderer extends JLabel implements TableCellRenderer {

        private String columnName;
        int nbMinSignaler;
        int nbMinPlancher;

        public ColorRenderer(String column, int nbMinSignaler, int nbMinPlancher) {
            this.columnName = column;
            this.nbMinSignaler = nbMinSignaler;
            this.nbMinPlancher = nbMinPlancher;
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row,
                int column) {
            Integer objetValue = (Integer) table.getValueAt(row,
                    table.getColumnModel().getColumnIndex(columnName));

            if (value != null) {
                setText(value.toString());
            }
            if (isSelected) {
                setBackground(table.getSelectionBackground());
                setForeground(table.getSelectionForeground());
            } else {
                setBackground(table.getBackground());
                setForeground(table.getForeground());
//             if (objetValue.equals("1")) setBackground(java.awt.Color.pink);
                if (objetValue > nbMinSignaler) {
                    setBackground(java.awt.Color.LIGHT_GRAY);
                } else if (objetValue > nbMinPlancher) {
                    setBackground(java.awt.Color.ORANGE);
                } else {
                    setBackground(java.awt.Color.RED);
                }
//             if (objetValue.equals("4")) setBackground(java.awt.Color.blue);

            }
            return this;
        }
    }

}
